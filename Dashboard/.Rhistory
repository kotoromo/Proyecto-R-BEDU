ran <- as.data.frame(ran)
colnames(ran) <- "Aleatorio"
for (i in 1:length(ran$Aleatorio)) {
if(i <= 15) {
ran$Resultado[i] = (ran$Aleatorio[i]^2)+12
}else{
ran$Resultado[i] = ran$Aleatorio[i]
}
}
ran
head(ran)
tail(ran)
prim_div <- read.csv("https://www.football-data.co.uk/mmz4281/1920/SP1.csv")
head(prim_div)
prim_div$FTHG
prim_div$FTAG
?table()
table(prim_div$FTHG)
table(prim_div$FTHG, prim_div$FTAG)
table(prim_div$FTHG)
table(prim_div$FTAG)
c(table(prim_div$FTHG),table(prim_div$FTAG))
rbind(table(prim_div$FTHG),table(prim_div$FTAG))
prim_div$FTAG[2]
prim_div$FTAG
table(prim_div$FTHG)
table(prim_div$FTHG)[1]
rbind.fill(table(prim_div$FTHG),table(prim_div$FTAG))
?rbind.fill()
??rbind.fill()
library(plyr)
rbind.fil(table(prim_div$FTHG),table(prim_div$FTAG))
rbind.fill(table(prim_div$FTHG),table(prim_div$FTAG))
rbind.fill.matrix(table(prim_div$FTHG),table(prim_div$FTAG))
(frec_loc <- table(prim_div$FTHG))
(frec_vis <- table(prim_div$FTAG))
frec_vis[1]
frec_vis[6] <- 0
frec_vis
(frec_loc <- table(prim_div$FTHG))
(frec_vis <- table(prim_div$FTAG))
frec_vis[7] <- 0
frec_vis
frec_vis$3
rbind(frec_loc,frec_loc)
(frec_loc <- table(prim_div$FTHG))
(frec_vis <- table(prim_div$FTAG))
frec_vis[7] <- 0
frec_vis
rbind(frec_loc,frec_vis)
rbind("Local" = frec_loc,frec_vis)
rbind("Local" = frec_loc, "Visitante" = frec_vis)
tabla_frec <- rbind("Local" = frec_loc, "Visitante" = frec_vis)
tabla_frec["Local"]
tabla_frec[,"Local"]
tabla_frec["Local",]
View(tabla_frec)
tabla_frec[1,]
prob_marg_loc <-
tabla_frec["Local",]
prob_marg_loc <-
tabla_frec["Local",]
tabla_frec[1,]
tabla_frec["Local",]
tabla_frec["Local",]*2
tabla_frec["Local",]/sum(tabla_frec["Local",])
sum(tabla_frec["Local",])
tabla_frec["Visitante",]/sum(tabla_frec["Visitante",])
rbind(prob_marg_loc, prob_marg_vis)
prob_marg_loc <- tabla_frec["Local",]/sum(tabla_frec["Local",])
prob_marg_vis <- tabla_frec["Visitante",]/sum(tabla_frec["Visitante",])
rbind(prob_marg_loc, prob_marg_vis)
rbind("Local" = prob_marg_loc, "Visitante" = prob_marg_vis)
tabla_frec["Local",]/(sum(tabla_frec["Local",])+sum(tabla_frec["Visitante",]))
prob_conj_loc <- tabla_frec["Local",]/(sum(tabla_frec["Local",])+sum(tabla_frec["Visitante",]))
prob_conj_vis <- tabla_frec["Visitante",]/(sum(tabla_frec["Local",])+sum(tabla_frec["Visitante",]))
rbind("Local" = prob_conj_loc, "Visitante" = prob_conj_vis)
library(DescTools)
?Mode()
??Mode()
install.packages("~/Downloads/DescTools_0.99.45.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/R_Packeges/mvtnorm_1.1-3.tar.gz", repos = NULL, type = "source")
install.packages("expm", dependencies = FALSE)
install.packages("expm", dependencies = FALSE)
install.packages("Exact", dependencies = FALSE)
# Moda
install.packages("DescTools")
library('Exact')
install.packages("curl", dependencies = FALSE)
install.packages("curl", dependencies = FALSE)
# Moda
install.packages("DescTools")
library(DescTools)
## Medidas de tendencia central
# Media
x = c(4000, 9000, 9000, 10000)
Mode(x) # mode es diferente de Mode (Case sensitive)
DescTools::Mode(x) # mode es diferente de Mode (Case sensitive)
x <- c(1,3,4)
median(x)
vector_ord[length(x)/2]
vector_ord <- sort(vector)
mediana <- function(vector){
vector_ord <- sort(vector)
vector_ord[length(x)/2]
}
mediana(x)
x <- c(1,3,4)
mediana <- function(vector){
vector_ord <- sort(vector)
vector_ord[(length(x)/2)+1]
}
mediana(x)
5/2
5%2
5%%2
6%%2
7%%2
3%%2
x <- c(1,3,4,5)
mediana(x)
median(x)
View(mediana)
mediana <- function(vector){
vector_ord <- sort(vector)
val_med <- vector_ord[length(x)/2]
if (val_med%%2 == 1) {
veal_med <- val_med+1
}else{
val_med <- (val_med+val_med+1) / 2
}
val_med
}
mediana(x)
median(x)
mediana <- function(vector){
vector_ord <- sort(vector)
val_med <- vector_ord[length(x)/2]
if (val_med%%2 == 1) {
veal_med <- val_med+1
}else{
val_med <- (val_med+(val_med+1)) / 2
}
val_med
}
mediana(x)
median(x)
mediana <- function(vector){
vector_ord <- sort(vector)
val_med <- vector_ord[length(x)/2]
if (val_med%%2 == 1) {
veal_med <- val_med+1
}else{
val_med <- (val_med+(val_med+1)) / 2
}
val_med
}
mediana(x)
mediana <- function(vector){
vector_ord <- sort(vector)
val_med <- vector_ord[length(x)/2]
if (val_med%%2 == 1) {
veal_med <- val_med+1
}else{
val_med <- (val_med+(val_med+1)) / 2
}
return(val_med)
}
mediana(x)
median(x)
mediana <- function(vector){
vector_ord <- sort(vector)
val_med <- vector_ord[length(vector)/2]
if (val_med%%2 == 1) {
veal_med <- val_med+1
}else{
val_med <- (val_med+(val_med+1)) / 2
}
return(val_med)
}
mediana(x)
mediana <- function(vector){
vector_ord <- sort(vector)
val_med <- vector_ord[length(vector)/2]
print(val_med%%2)
if (val_med%%2 == 1) {
veal_med <- val_med+1
}else{
val_med <- (val_med+(val_med+1)) / 2
}
return(val_med)
}
mediana(x)
mediana <- function(vector){
vector_ord <- sort(vector)
val_med <- vector_ord[length(vector)/2]
print(val_med)
print(val_med%%2)
if (val_med%%2 == 1) {
veal_med <- val_med+1
}else{
val_med <- (val_med+(val_med+1)) / 2
}
return(val_med)
}
mediana(x)
mediana <- function(vector){
vector_ord <- sort(vector)
val_med <- vector_ord[length(vector)/2]
if ((length(vector)/2)%%2 == 1) {
veal_med <- val_med+1
}else{
val_med <- (val_med+(val_med+1)) / 2
}
return(val_med)
}
mediana(x)
median(x)
x <- c(1,3,4,5,7,3,8,0,5,3,2,5,5)
median(x)
mediana(x)
x <- c(1,3,4,5,7,3,8,0,5,3,2,5,5)
median(x)
mediana(x)
sort(x)
x <- c(1,3,4)
median(x)
mediana(x)
3%%2
length(x)/2
round(length(x)/2)
x <- c(1,3,4,4,5)
round(length(x)/2)
x <- c(1,3,4,4,5)
length(x)/2
round(length(x)/2)
mediana <- function(vector){
vector_ord <- sort(vector)
pos_med <- round(length(vector)/2)
if (pos_med%%2 == 1) {
val_med <- vector_ord[(length(vector)/2)+1]
}else{
val_med <- (val_med+(val_med+1)) / 2
}
return(val_med)
}
round(length(x)/2)
round(1.5)
round(2.5)
round(3.5)
round(4.5)
round(5.5)
ceiling(5.5)
ceiling(4.5)
floor(4.5)
floor(4)
mediana <- function(vector){
vector_ord <- sort(vector)
pos_med <- floor(length(vector)/2)
if (pos_med%%2 == 1) {
val_med <- vector_ord[(length(vector)/2)+1]
}else{
val_med <- (vector_ord[pos_med]+vector_ord[pos_med+1]) / 2
}
return(val_med)
}
median(x)
mediana(x)
mediana <- function(vector){
vector_ord <- sort(vector)
pos_med <- floor(length(vector)/2)
print(pos_med)
if (pos_med%%2 == 1) {
val_med <- vector_ord[(length(vector)/2)+1]
}else{
val_med <- (vector_ord[pos_med]+vector_ord[pos_med+1]) / 2
}
return(val_med)
}
mediana(x)
mediana <- function(vector){
vector_ord <- sort(vector)
pos_med <- ceiling(length(vector)/2)
if (pos_med%%2 == 1) {
val_med <- vector_ord[(length(vector)/2)-1]
}else{
val_med <- (vector_ord[pos_med]+vector_ord[pos_med+1]) / 2
}
return(val_med)
}
median(x)
mediana(x)
mediana <- function(vector){
vector_ord <- sort(vector)
pos_med <- ceiling(length(vector)/2)
print(pos_med)
if (pos_med%%2 == 1) {
val_med <- vector_ord[(length(vector)/2)-1]
}else{
val_med <- (vector_ord[pos_med]+vector_ord[pos_med+1]) / 2
}
return(val_med)
}
mediana(x)
ceiling(length(x)/2)
x <- c(1,3,4,4)
ceiling(length(x)/2)
x <- c(1,3,4,4)
mediana <- function(vector){
vector_ord <- sort(vector)
pos_med <- ceiling(length(vector)/2)
print(pos_med)
if (pos_med%%2 == 1) {
val_med <- vector_ord[pos_med]
}else{
val_med <- (vector_ord[pos_med]+vector_ord[pos_med+1]) / 2
}
return(val_med)
}
median(x)
mediana(x)
x <- c(1,3,4,4,6)
median(x)
mediana(x)
mediana <- function(vector){
vector_ord <- sort(vector)
pos_med <- ceiling(length(vector)/2)
if (pos_med%%2 == 1) {
val_med <- vector_ord[pos_med]
}else{
val_med <- (vector_ord[pos_med]+vector_ord[pos_med+1]) / 2
}
return(val_med)
}
x <- c(1,3,4,4,6,5,3,7,8,3,2,64,24,74,59,75,1064,134,13)
median(x)
mediana(x)
length(x)
ceiling(length(x)/2)
length(x)/2
sort(x)
mediana <- function(vector){
vector_ord <- sort(vector)
pos_med <- ceiling(length(vector)/2)
if (length(vector)%%2 == 1) {
val_med <- vector_ord[pos_med]
}else{
val_med <- (vector_ord[pos_med]+vector_ord[pos_med+1]) / 2
}
return(val_med)
}
mediana(x)
median(x)
x <- c(23434,3242,1,14,3424,5,3,7,8,3,2,64,24,74,59,75,1064,134,13)
median(x)
mediana(x)
x <- qnorm(50)
x <- pnorm(50)
?qnorm
x <- rnorm(50)
x <- rnorm(1000)
median(x)
mediana(x)
x <- rnorm(100)
mediana(x)
median(x)
# Obtenemos 1000 muestras de tamañoo n = 33 y sus medias
set.seed(4465) # Para reproducir las muestras en el futuro
m1000.33 <- sapply(X = rep(33, 1000), FUN = rexp, 2)
media1000.33 <- apply(m1000.33, 2, mean)
mdf <- as.data.frame(media1000.33)
tail(mdf)
# Observamos cómo se comporta el histograma
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
################################################################################
## EJEMPLO 02: TEOREMA CENTRAL DEL LÍMITE
library(ggplot2)
# Observamos cómo se comporta el histograma
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
# Bajo el TCL, se puede comprobar que:
# 1) La media de la distribución muestral de la media es igual a la media de la muestra
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
# 2) La sd de la distribución muestral de la media es igual a la sd/raiz(n)
# Se le conoce como error estándar
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
pnorm(58, mean = 60, sd = 4/5)
# Dada dos muestras aleatorias de tamaños n1 = 56 y n2 = 63
set.seed(174376)
n1 = 56
m1 <- rexp(n = n1, rate = 4.1); 1/4.1 # media real de la población
m1_real = 1/4.1
n2 = 63
m2 <- rexp(n = n2, rate = 3.4); 1/3.4 # media real de la población
m2_real = 1/3.4
m1_real - m2_real # diferencia de medias real
z0 <- (mean(m1)-mean(m2)-0)/sqrt(var(m1)/n1 + var(m2)/n2)
z0
z.025 <- qnorm(p = 0.025, lower.tail = FALSE)
z.025
# Como
(z0 < -z.025) | (z0 > z.025)
z0 < -z.025
z0 > z.025
# El p-value lo podemos calcular como
pvalue <- 2*pnorm(z0, lower.tail = FALSE)
pvalu
pvalue
# El p-value lo podemos calcular como
(pvalue <- 2*pnorm(z0, lower.tail = FALSE))
# Se puede ocupar la prueba t.test para probar la diferencia de medias
# Usamos la prueba t porque esta se aproxima a z a medida que n es más grande
t.test(x = m1, y = m2,
alternative = "two.sided",
mu = 0)
# Gráficamente
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estándar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(min(x), x[x<=z0], z0), c(0, y[x<=z0], 0), col="purple")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
polygon(c(-z0, x[x>=-z0], max(x)), c(0, y[x>=-z0], 0), col="purple")
axis(side = 1, at = -z0, font = 2, padj = 1, lwd = 2)
# Dada dos muestras aleatorias de tamaños n1 = 23 y n2 = 20
set.seed(174376)
n1 = 23
m1 <- rnorm(n = n1, mean = 175, sd = 3)
m1_real = 175
n2 = 20
m2 <- rnorm(n = n2, mean = 160, sd = 3)
m2_real = 160
m1_real - m2_real # diferencia de medias real
t0 <- (mean(m1)-mean(m2)-0)/(sqrt(((n1-1)*var(m1)+(n2-1)*var(m2))/(n1+n2-2))*sqrt(1/n1+1/n2))
t0
t.025 <- qt(p = 0.025, df= 41, lower.tail = FALSE)
(t.025 <- qt(p = 0.025, df= 41, lower.tail = FALSE))
# Como
(t0 < -t.025) | (t0 > t.025)
# El p-value lo podemos calcular como
pvalue <- 2*pt(t0, df = 41, lower.tail = FALSE)
pvalue
# La función t.test nos permite hacer inferencia a una y dos medias
t.test(x = m1, y = m2,
alternative = "two.sided",
mu = 0, paired = FALSE, var.equal = TRUE)
z0 <- (mean(m1)-mean(m2)-0)/sqrt(var(m1)/n1 + var(m2)/n2)
z0
z.025 <- qnorm(p = 0.025, lower.tail = FALSE)
z.025
(z0 > z.025)
# Dada dos muestras aleatorias de tamaños n1 = 56 y n2 = 63
set.seed(174376)
n1 = 56
m1 <- rexp(n = n1, rate = 4.1); 1/4.1 # media real de la población
m1_real = 1/4.1
n2 = 63
m2 <- rexp(n = n2, rate = 3.4); 1/3.4 # media real de la población
m2_real = 1/3.4
m1_real - m2_real # diferencia de medias real
z0 <- (mean(m1)-mean(m2)-0)/sqrt(var(m1)/n1 + var(m2)/n2)
z0
z.025 <- qnorm(p = 0.025, lower.tail = FALSE)
z.025
(z0 < -z.025)
(z0 > z.025)
shiny::runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
shiny::runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
runApp('Desktop/Beca_Santander/Introduccion_R/Sesion_8/Reto1')
shiny::runApp('Desktop/Beca_Santander/Introduccion_R/Proyecto/Proyecto-R-BEDU/Dashboard')
runApp('Desktop/Beca_Santander/Introduccion_R/Proyecto/Proyecto-R-BEDU/Dashboard')
setwd("~/Desktop/Beca_Santander/Introduccion_R/Proyecto/Proyecto-R-BEDU/Dashboard")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
